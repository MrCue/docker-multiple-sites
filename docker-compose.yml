version: '3.8'

services:
    db:
        restart: unless-stopped
        image: mysql
        volumes:
            - ./_data/db:/var/lib/mysql
        environment:
            MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
            MYSQL_DATABASE: ${MYSQL_DATABASE}
            MYSQL_USER: ${MYSQL_USER}
            MYSQL_PASSWORD: ${MYSQL_PASSWORD}
        networks:
          - backend

    nginx:
        restart: unless-stopped
        build: infrastructure/nginx
        networks:
          - backend
          - web
        volumes:
            - ./_logs/nginx:/var/log/nginx
            - ./_logs/php-fpm:/var/logs/php
            - ./symfony:/var/www/symfony
        labels:
          #### Labels define the behavior and rules of the traefik proxy for this container ####
          - "traefik.enable=true" # <== Enable traefik to proxy this container
          - "traefik.http.routers.nginx-web.rule=Host(`symfony.local`)" # <== Your Domain Name goes here for the http rule
          - "traefik.http.routers.nginx-web.entrypoints=web" # <== Defining the entrypoint for http, **ref: line 30
          - "traefik.http.routers.nginx-web.middlewares=redirect@file" # <== This is a middleware to redirect to https
          - "traefik.http.routers.nginx-secured.rule=Host(`symfony.local`)" # <== Your Domain Name for the https rule
          - "traefik.http.routers.nginx-secured.entrypoints=web-secured" # <== Defining entrypoint for https, **ref: line 31
          - "traefik.http.routers.nginx-secured.tls.certresolver=mytlschallenge" # <== Defining certsresolvers for https

    nodejs:
        restart: unless-stopped
        image: node:13-alpine
        volumes:
            - ./symfony:/var/www/symfony
        networks:
          - backend

        working_dir: /var/www/symfony
        command: tail -f /dev/null

    php:
        restart: unless-stopped
        build:
            context: infrastructure/php7-fpm
            args:
                TIMEZONE: ${TIMEZONE}
        volumes:
            - ./_logs/php-fpm:/var/logs/php
            - ./symfony:/var/www/symfony
            - ./_logs/symfony:/var/www/symfony/app/logs
            - ./_data/symfony/uploads:/var/www/symfony/uploads
        networks:
          - backend

    php_cli_supervisord:
        restart: unless-stopped
        build:
            context: infrastructure/php7-cli-supervisord
            args:
                TIMEZONE: ${TIMEZONE}
        volumes:
            - ./_logs/php-cli:/var/logs/php
            - ./_logs/supervisor:/var/log/supervisor
            - ./symfony:/var/www/symfony
            - ./_logs/symfony:/var/www/symfony/app/logs
            - ./_data/symfony/uploads:/var/www/symfony/uploads

        networks:
          - backend
        command: /usr/bin/supervisord

    rabbit_mq:
        restart: unless-stopped
        image: rabbitmq:3-management-alpine
        #ports:
        #    - 15671:15671
        #    - 15672:15672
        #    - 5672:5672
        volumes:
            - ./_logs/rabbitmq:/var/log/rabbitmq/log
        networks:
          - backend

    redis:
        restart: unless-stopped
        image: redis:alpine
        #ports:
        #    - 6379:6379
        volumes:
          - ./_data/redis:/data
        networks:
          - backend

    traefik:
      image: traefik:v2.0
      restart: unless-stopped
      container_name: traefik
      ports:
        - 80:80     # <== http
        - 8080:8080 # <== :8080 is where the dashboard runs on
        - 443:443   # <== https
      command:
        #### These are the CLI commands that will configure Traefik and tell it how to work! ####
        ## API Settings - https://docs.traefik.io/operations/api/, endpoints - https://docs.traefik.io/operations/api/#endpoints ##
        - --api.insecure=true # <== Enabling insecure api, NOT RECOMMENDED FOR PRODUCTION
        - --api.dashboard=true # <== Enabling the dashboard to view services, middlewares, routers, etc...
        - --api.debug=true # <== Enabling additional endpoints for debugging and profiling
        ## Log Settings (options: ERROR, DEBUG, PANIC, FATAL, WARN, INFO) - https://docs.traefik.io/observability/logs/ ##
        - --log.level=DEBUG # <== Setting the level of the logs from traefik
        ## Provider Settings - https://docs.traefik.io/providers/docker/#provider-configuration ##
        - --providers.docker=true # <== Enabling docker as the provider for traefik
        - --providers.docker.exposedbydefault=false # <== Don't expose every container to traefik, only expose enabled ones
        - --providers.file.filename=/dynamic.yaml # <== Referring to a dynamic configuration file
        ##  Needs to have the docker-compose prefix added ie {prefix}_web
        - --providers.docker.network=docker-multiple-sites_web # <== Operate on the docker network named web
        ## Entrypoints Settings - https://docs.traefik.io/routing/entrypoints/#configuration ##
        - --entrypoints.web.address=:80 # <== Defining an entrypoint for port :80 named web
        - --entrypoints.web-secured.address=:443 # <== Defining an entrypoint for https on port :443 named web-secured
        ## Certificate Settings (Let's Encrypt) -  https://docs.traefik.io/https/acme/#configuration-examples ##
        - --certificatesresolvers.mytlschallenge.acme.tlschallenge=true # <== Enable TLS-ALPN-01 to generate and renew ACME certs
        - --certificatesresolvers.mytlschallenge.acme.email=steve@lythamcomputers.com # <== Setting email for certs
        - --certificatesresolvers.mytlschallenge.acme.storage=./_data/letsencrypt/acme.json # <== Defining acme file to store cert information
      volumes:
        - ./_data/letsencrypt:/letsencrypt # <== Volume for certs (TLS)
        - /var/run/docker.sock:/var/run/docker.sock # <== Volume for docker admin
        - ./infrastructure/traefik/dynamic.yaml:/dynamic.yaml # <== Volume for dynamic conf file, **ref: line 27
      networks:
        - web # <== Placing traefik on the network named web, to access containers on this network
      labels:
        #### Labels define the behavior and rules of the traefik proxy for this container ####
        - "traefik.enable=true" # <== Enable traefik on itself to view dashboard and assign subdomain to view it
        - "traefik.http.routers.api.rule=Host(`monitor.example.com`)" # <== Setting the domain for the dashboard
        - "traefik.http.routers.api.service=api@internal" # <== Enabling the api to be a service to access



      #ELK does not work well on servers with a small amount of memory, CPU usage will be very high
      #elk:
      #    restart: unless-stopped
      #    image: willdurand/elk
      #    ports:
      #        - 81:80
      #    volumes:
      #        - ./infrastructure/elk/logstash:/etc/logstash
      #        - ./infrastructure/elk/logstash/patterns:/opt/logstash/patterns
      #    volumes_from:
      #        - php
      #        - nginx


networks:
  web:
  backend: